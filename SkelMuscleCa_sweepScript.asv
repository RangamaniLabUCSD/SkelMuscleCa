%% Sweep parameters for quick testing of objective function

yinit = [
    0.0122; 	% yinit(1) is the initial condition for 'SOCEProb'
    1500.0;		% yinit(2) is the initial condition for 'c_SR'
    0.9983;		% yinit(3) is the initial condition for 'h_K'
    0.9091;		% yinit(4) is the initial condition for 'w_RyR'
    -88.0;		% yinit(6) is the initial condition for 'Voltage_PM'
    14700.0;	% yinit(7) is the initial condition for 'Na_i'
    5830.0;		% yinit(8) is the initial condition for 'Cl_i'
    0.1;		% yinit(9) is the initial condition for 'c_i'
    0.003;		% yinit(10) is the initial condition for 'n'
    0.0128;		% yinit(11) is the initial condition for 'm'
    0.8051;		% yinit(12) is the initial condition for 'h'
    0.8487;		% yinit(13) is the initial condition for 'S'
    154500.0;	% yinit(14) is the initial condition for 'K_i'
    387;        % yinit(15) is the initial condition for 'CaParv'
    1020;       % yinit(16) is the initial condition for 'MgParv'
    0.3632;    % yinit(17) is the inital consition for 'CATP'
    ];

% Parameter values
param = importdata('InputParam1.xlsx');
p0 =  param.data;

% ClampCurrent = p(1) ;K_S = p(2) ;delta = p(3) ;beta_m0 = p(4) ;K_betam = p(5) ;alpha_m0 = p(6) ;K_alpham = p(7) ;K_RyR = p(8) ;f_RyR = p(9) ;
%p = [-25000, 1000000, 0.4, 1380, 18, 288, 10, 4.5, 0.2]' ;%.* pSol_LM';

lb = 0.5*ones(length(p0),1);
ub = 2*ones(length(p0),1);

psOptions = optimoptions('particleswarm','SwarmSize',100,'UseParallel',true,'HybridFcn',@fmincon,...
    'PlotFcn','pswplotbestf','Display','iter','MaxStallIterations',50);

numParam = length(lb);
pVec = ones(1,numParam); %41
samples = 100;
randPop = exp(0.5*randn([samples, length(p0)]));
objVals = zeros(samples, 1);
CaSaved = cell(samples, 1);
figure
hold on
for i = 1:samples
    [objVals(i), simSaved, fluxesSaved] = pToObj(randPop(i,:), p0, yinit);
    CaSaved{i} = simSaved{5};
    fluxesSaved{i} = fluxesSaved{5};
    plot(CaSaved{i}(:,1), CaSaved{i}(:,2))
    drawnow
    fprintf("%d\n", i)
end

%% plot the best solution over an extended time
[~,bestIdx] = min(objVals);
pBest = randPop(bestIdx,:).*p0';
% load PSO_15-Mar-2024_NEW.mat pSol
%pVec = pSol;
% pSol(end+1) = 1;
% pBest = pSol(:) .* p0(:);
% pBest(43) = p0(43);
[TimeSS,ySS] = SkelMuscleCa1_SS([0 1000],0, 0, yinit, pBest, tic, 10);
[Time,Y, ~, fluxes] = SkelMuscleCa1_SS([0 150], 50, 0, ySS(end,:), pBest, tic, 10);

%% figure 4
t = [0 : 2.5 : max(Time)];
MaxCa = zeros(length(t),1);
for j = 1 : (length(t) - 1)
    t_index = (Time > t(j)) & (Time < t(j+1));
    timepts = Time(t_index);
    MaxCa(j) = max(Y(t_index,8));   
end
figure
scatter(t(2:end),MaxCa(1:end-1))

AUC = zeros(length(t),1);
for k = 1 : (length(t) - 1)
    t_index = (Time >= (t(k) + 0.5)) & (Time < t(k+1));
    timepts = Time(t_index);
    AUC(k) = trapz(timepts,Y(t_index,8));   
end
figure



%% Plot function
Fig3a_1(Time,Y(:,5),Y(:,8))
Fig3a_2(Time,Y(:,5),Y(:,8)) % V_SL vs Ca2+_Myo Zoomedin
Fig3b(Time,Y(:,1),Y(:,2)) % Density of activated Orai1 channel vs SR [Ca^{2+}] 
Fluxes_myo = fluxes(:,1) + fluxes(:,2)+fluxes(:,3) + fluxes(:,4)+ fluxes(:,5);
Fluxes_SR = fluxes(:,6) + fluxes(:,7)+ fluxes(:,8);
Fig3c(Time,Fluxes_myo,Fluxes_SR) % Myo vs SR fluxes
Fig3d(Time,[fluxes(:,6), fluxes(:,7), fluxes(:,8)]) % SR fluxes
Fig3e(Time,[fluxes(:,4), fluxes(:,3)]) % DHPR and NCX Myo Fluxes


function [objVal, simSaved, fluxesSaved] = pToObj(pVec, p_est, yinit) % Obj function should be scalar

%Initialize values
%fprintf(' ------ Code Started ------ ');
T_max = zeros(1,9);
InterpExpt = cell(1,9);
Expt_t = cell(1,9);
InterpComp = cell(1,9);
CompV = cell(1,5);
CompC = cell(1,5);
%yinf_ratio = zeros(9,17);

load Exptdata.mat Expt
%Expt = {[R_t R_C],[R_MP_t R_MP_C] [HB_t HB_C], [H_t H_C],[HB_MP_t HB_MP_C], [K_t K_V], [B_t B_V] , [M_t M_V], [W_t W_V], [MJ_T MJ_V]};
StartTimer = tic;
freq = [100, 100, 67, 67,67, 60, 60, 60,60];
expt_title = ["Rincon","Rincon", "Baylor & Hollingworth", "Hollingworth", "Baylor & Hollingworth", "Yonemura","Bibollet", "Miranda","Wallinga"];
param = p_est(:) .* pVec(:);
tSS = 0:1000;

expt_n = [4 5 7 8]; % 1:9; % [1 8];%

%Interpolating experimental values
for m_index = 1 :length(expt_n) %:9
    m = expt_n(m_index);
    T_max(m) = max(Expt{m}(:,1))/1000;
    Expt_t{m} = Expt{m}(:,1)/1000;
    if m < 6
        Expt{m}(:,2) = Expt{m}(:,2) + 0.1;
    end
    InterpExpt{m} = interp1(Expt_t{m},Expt{m}(:,2),0:0.0001:T_max(m));
end

penaltyVal = 100000;
count = 0;
simSaved = cell(length(expt_n), 1);
fluxesSaved = cell(length(expt_n), 1);
for n_index = 1 :length(expt_n) %:9
    n = expt_n(n_index);

    %% Compute SS with ode15s
    [TimeSS,ySS] = SkelMuscleCa1_SS(tSS,0, 0, yinit, param,StartTimer,n);
    if size(ySS,1) < length(tSS)
        objVal = penaltyVal;
        count = count+1;
        return
    end
    if any(isnan(ySS))
        objVal = penaltyVal;
        count = count+1;
        return
    end
    yinf = ySS(end,:);

    %% Calculate Dynamics
    t = 0:0.0001:T_max(n);
    [Time,y,~,fluxes] = SkelMuscleCa1_SS(t,freq(n), 0, yinf, param,StartTimer,n);
    %[Time,y] = SkelMuscleCa1_SS([0 t(n)],freq(n), 0, yinit, p,tic,n);
    if size(y,1) < length(t)
        objVal = penaltyVal;
        count = count+1;
        return
    end
    if n <= 5
        InterpComp{n} = y(:,8) ; % Calcium Calculations
        CompV{n} = y(:,5) ;
    elseif n > 5
        InterpComp{n} = y(:,5); % Voltage Calculations
        CompC{n} = y(:,8);
    end
    %InterpComp{n} = interp1(Time,Comp,0:0.0001:T_max(n));
    %yinit = yinf;
    simSaved{n} = [t', InterpComp{n}];
    fluxesSaved{n} = [t', fluxes];
end

%% Objective Value Calc
delta = cell(1,9);
sum_delta = zeros(1,9);
Error = cell(1,9);

for j_index = 1 :length(expt_n) %:9
    j = expt_n(j_index);
    weight = length(InterpExpt{j}) ;
    sigma_C = 0.5; %(0.05 * InterpExpt{j}); %
    sigma_V = 5 ;
    delta{j} = InterpComp{j}' - InterpExpt{j};
    if j < 6
        Error{j} = ((delta{j} ./ sigma_C ) .^ 2 )./ weight; %     (((InterpComp{j}' - InterpExpt{j})./sigma_C).^2)./weight ;
    elseif j > 5
        Error{j} = ((delta{j} ./ sigma_V ) .^ 2 )./ weight; % (((InterpComp{j}' - InterpExpt{j}) ./ sigma_V).^2) ./ weight;
    end
    sum_delta(j) = sum(Error{j});

end

objVal = sum(sum_delta);
end
